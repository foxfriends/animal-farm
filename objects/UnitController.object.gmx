<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
selX = noone;
selY = noone;
selCount = 0;
grid = mp_grid_create(-32, -32, room_width / 32 + 2, room_height / 32 + 2, 32, 32);
mp_grid_add_instances(grid, Wall, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent stacked animals
for(var i = 0; i &lt; instance_number(_unit); i++) {
    var a = instance_find(_unit, i);
    for(var j = 0; j &lt; instance_number(_unit); j++) {
        var b = instance_find(_unit, j);
        if(a.id != b.id) { //Not the same unit
            if( a.x == a.destX &amp;&amp; a.y == a.destY &amp;&amp; 
                b.x == b.destX &amp;&amp; b.y == b.destY) { //Not moving
                if(a.x == b.x &amp;&amp; a.y == b.y) { //Same position
                    //Check for shortest straight line
                    var dista = 32;
                    if((b.x != b.home.x || b.y != b.home.y) &amp;&amp; (b.x != House.x || b.y != House.y) &amp;&amp; (b.x != Quarry.x || b.y != Quarry.y) &amp;&amp; (b.object_index != Dog || !b.killer)) {
                        with(b) {
                            while(destX == x &amp;&amp; destY == y) {
                                var c, k;
                                //Right
                                for(k = 0; k &lt; instance_number(_unit); k++) {
                                    c = instance_find(_unit, k);
                                    if(place_meeting(x + dista, y, Wall) || (x + dista == c.destX &amp;&amp; y == c.destY) || x + dista &gt; room_width) {
                                        break;
                                    }
                                }
                                if(k == instance_number(_unit)) {
                                    destX = x + dista;
                                    destY = y;
                                    break;
                                }
                                //Left
                                for(k = 0; k &lt; instance_number(_unit); k++) {
                                    c = instance_find(_unit, k);
                                    if(place_meeting(x - dista, y, Wall) || (x - dista == c.destX &amp;&amp; y == c.destY) || x - dista &lt; 0) {
                                        break;
                                    }
                                }
                                if(k == instance_number(_unit)) {
                                    destX = x - dista;
                                    destY = y;
                                    break;
                                }
                                //Down
                                for(k = 0; k &lt; instance_number(_unit); k++) {
                                    c = instance_find(_unit, k);
                                    if(place_meeting(x, y + dista, Wall) || (x == c.destX &amp;&amp; y + dista == c.destY) || y + dista &gt; room_height - DIAHEIGHT) {
                                        break;
                                    }
                                }
                                if(k == instance_number(_unit)) {
                                    destX = x;
                                    destY = y + dista;
                                    break;
                                }
                                //Up
                                for(k = 0; k &lt; instance_number(_unit); k++) {
                                    c = instance_find(_unit, k);
                                    if(place_meeting(x, y - dista, Wall) || (x == c.destX &amp;&amp; y - dista == c.destY) || y - dista &lt; 0) {
                                        break;
                                    }
                                }
                                if(k == instance_number(_unit)) {
                                    destX = x;
                                    destY = y - dista;
                                    break;
                                }
                                var distb = 32;
                                while(destX == x &amp;&amp; destY == y &amp;&amp; distb &lt;= dista) {
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x + dista, y + distb, Wall) || (x + dista == c.destX &amp;&amp; y + distb == c.destY) || x + dista &gt; room_width || y + distb &gt; room_height - DIAHEIGHT) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x + dista;
                                        destY = y + distb;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x + dista, y - distb, Wall) || (x + dista == c.destX &amp;&amp; y - distb == c.destY) || x + dista &gt; room_width || y - distb &lt; 0) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x + dista;
                                        destY = y - distb;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x - dista, y + distb, Wall) || (x - dista == c.destX &amp;&amp; y + distb == c.destY) || x - dista &lt; 0 || y + distb &gt; room_height - DIAHEIGHT) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x - dista;
                                        destY = y + distb;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x - dista, y - distb, Wall) || (x - dista == c.destX &amp;&amp; y - distb == c.destY) || x - dista &lt; 0 || y - distb &lt; 0) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x - dista;
                                        destY = y - distb;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x + distb, y + dista, Wall) || (x + distb == c.destX &amp;&amp; y + dista == c.destY) || x + distb &gt; room_width || y + dista &gt; room_height - DIAHEIGHT) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x + distb;
                                        destY = y + dista;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x - distb, y + dista, Wall) || (x - distb == c.destX &amp;&amp; y + dista == c.destY) || x - distb &lt; 0 || y + dista &gt; room_height - DIAHEIGHT) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x - distb;
                                        destY = y + dista;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x + distb, y - dista, Wall) || (x + distb == c.destX &amp;&amp; y - dista == c.destY) || x + distb &gt; room_width || y - dista &lt; 0) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x + distb;
                                        destY = y - dista;
                                        break;
                                    }
                                    for(k = 0; k &lt; instance_number(_unit); k++) {
                                        c = instance_find(_unit, k);
                                        if(place_meeting(x - distb, y - dista, Wall) || (x - distb == c.destX &amp;&amp; y - dista == c.destY) || x - distb &lt; 0 || y - dista &lt; 0) {
                                            break;
                                        }
                                    }
                                    if(k == instance_number(_unit)) {
                                        destX = x - distb;
                                        destY = y - dista;
                                        break;
                                    }
                                    distb += 32;
                                }
                                dista += 32;
                                if(dista &gt; room_width &amp;&amp; dista &gt; room_height - DIAHEIGHT) {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Capture selection
if(selX != noone) {
    var count = 0;
    with(_unit) {
        if(!input_check(ADDSELECT) &amp;&amp; !input_check(SUBSELECT)) {
            selected = false;
        }
        if(x + sprite_width - sprite_xoffset &gt; min(other.selX, mouse_x) &amp;&amp; x - sprite_xoffset &lt; max(other.selX, mouse_x)) {
            if(y + sprite_height - sprite_yoffset &gt; min(other.selY, mouse_y) &amp;&amp; y - sprite_yoffset &lt; max(other.selY, mouse_y)) {
                if(controllable) {
                    selected = !input_check(SUBSELECT);
                }
            }
        }
        if(selected) {
            if(count == 12) {
                selected = false;
            } else {
                count++;
            }
        }
    }
    
    selX = noone;
    selY = noone;
    selCount = count;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move selected units to position
if(!Controller.cutscene) {
    if(mouse_y &lt; room_height - DIAHEIGHT) {
        with(_unit) {
            if(selected) {
                destX = floor(mouse_x) - (floor(mouse_x) % 32) + 16;
                destY = floor(mouse_y) - (floor(mouse_y) % 32) + 16;
                work = noone;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selection start
if(!Controller.cutscene) {
    if(input_check(TYPESELECT)) {
        if(!input_check(ADDSELECT) &amp;&amp; !input_check(SUBSELECT)) {
            with(_unit) {
                selected = false;
            }
        }
        var inst = instance_position(mouse_x, mouse_y, _unit);
        if(inst != noone) {
            var type;
            if(object_get_parent(inst.object_index) != _unit) {
                type = object_get_parent(inst.object_index);
            } else {
                type = inst.object_index;
            }
            with(_unit) {
                if(object_get_parent(object_index) == type || object_index == type) {
                    selected = !input_check(SUBSELECT) &amp;&amp; controllable;
                }
            }
        }
    } else {
        selX = mouse_x;
        selY = mouse_y;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the HUD
if(!dialog_count()) {
    draw_set_color(make_color_rgb(51, 51, 51));
    draw_background(bgHUDL, 0, window_get_height() - DIAHEIGHT);
    draw_background(bgHUDR, window_get_width() - background_get_width(bgHUDR), window_get_height() - DIAHEIGHT);
    draw_rectangle(background_get_width(bgHUDR), window_get_height() - DIAHEIGHT, window_get_width() - background_get_width(bgHUDR), window_get_height(), false);
    draw_set_color(make_color_rgb(255, 236, 181));
    var inst, xx = 64, yy = 64;
    for(var i = 0; i &lt; instance_number(_unit); i++) {
        inst = instance_find(_unit, i);
        if(inst.selected) {
            draw_sprite(inst.sprite_index, 1, xx, yy + window_get_height() - DIAHEIGHT);
            draw_rectangle(xx - 32, yy - 32 + window_get_height() - DIAHEIGHT, xx + 32, yy + 32 + window_get_height() - DIAHEIGHT, true)
            xx += 64;
            if(xx &gt; 64 + 320) {
                xx = 64;
                yy += 64;
            }
        }
    }
    draw_set_font(fMenu);
    draw_line(320 + 128 - 10, window_get_height() - DIAHEIGHT, 320 + 128 - 10, window_get_height());
    draw_line(640 + 128 - 10, window_get_height() - DIAHEIGHT, 640 + 128 - 10, window_get_height());
    draw_line(960 + 128 - 10, window_get_height() - DIAHEIGHT, 960 + 128 - 10, window_get_height());
    if(display_mouse_get_y() &lt; window_get_height() - DIAHEIGHT) {
        inst = instance_position(mouse_x, mouse_y, _unit);
        if(inst != noone) {
            draw_text(320 + 128, window_get_height() - DIAHEIGHT + 16, object_get_name(inst.object_index));
            draw_text(320 + 128, window_get_height() - DIAHEIGHT + 48, dialog_wrap(inst.description, 310, fMenu));
        }
        inst = instance_position(mouse_x, mouse_y, _location);
        if(inst != noone) {
            draw_text(640 + 128, window_get_height() - DIAHEIGHT + 16, object_get_name(inst.object_index));
            draw_text(640 + 128, window_get_height() - DIAHEIGHT + 48, dialog_wrap(inst.description, 310, fMenu));
        }
    }
    draw_text(960 + 128, window_get_height() - DIAHEIGHT + 16, dialog_wrap(Controller.task, window_get_width() - (960 + 128), fMenu));
    draw_text(960 + 128, window_get_height() - 128, "Hay: " + string(floor(Controller.hay)));
    draw_text(960 + 128, window_get_height() - 96, "Apples: " + string(floor(Controller.apples)));
    draw_text(960 + 128, window_get_height() - 64, "Milk: " + string(floor(Controller.milk)));
    draw_text(960 + 128, window_get_height() - 32, "Eggs: " + string(floor(Controller.eggs)));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw selection rectangle
if(selX != noone) {
    draw_set_color(make_color_rgb(91, 140, 176));
    draw_set_alpha(0.4);
    draw_rectangle(selX, selY, mouse_x, mouse_y, true);
    draw_rectangle(selX, selY, mouse_x, mouse_y, false);
    draw_set_alpha(1);
}

/*draw_set_alpha(0.2);
mp_grid_draw(grid);
draw_set_alpha(1);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
