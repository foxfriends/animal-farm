<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause menu
if(input_check_pressed(MENU) &amp;&amp; room == rFarm &amp;&amp; !sprite_exists(sPause)) {
    pause();
    instance_create(0, 0, PauseMenu);
    input_clear(MENU);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fast forward
if(input_check(SPEEDUP)) {
    if(state &lt; S_NAPOLEON) {
        room_speed = 300;
    } else {
        room_speed = 150;
    }
} else {
    room_speed = 30;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alerts
if(alertTimer &gt; 0) {
    alertTimer--;
} else {
    alertText = "";
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move view
if(room == rFarm &amp;&amp; !sprite_exists(sPause)) {
    if(view_enabled) {
        if(input_check(ANY_DIR)) {
            viewSpeed = min(viewSpeed + 1, 10);
        } else {
            if(viewClickX == noone) {
                if(mouse_check_button_pressed(mb_middle)) {
                    viewClickX = display_mouse_get_x();
                    viewClickY = display_mouse_get_y();
                }
            } else if(!mouse_check_button(mb_middle)) {
                viewClickX = noone;
                viewClickY = noone;
            }
            if(viewClickX != noone) {
                view_xview[0] = round(median(view_xview[0] + (display_mouse_get_x() - viewClickX) / 20, 0, room_width - view_wview[0]));
                view_yview[0] = round(median(view_yview[0] + (display_mouse_get_y() - viewClickY) / 20, 0, room_height - view_hview[0]));
            }
        }
        var xx = window_mouse_get_x() / window_get_width(), yy = window_mouse_get_y() / window_get_height();
        if(mouse_wheel_down()) {
            view_wview[0] *= 2;
            view_wview[0] = min(view_wport[0], view_wview[0]);
            view_hview[0] *= 2;
            view_hview[0] = min(view_hport[0], view_hview[0]);
            view_xview[0] = median(0, mouse_x - (view_wview[0] * xx), room_width - view_wview[0]);
            view_yview[0] = median(0, mouse_y - (view_hview[0] * yy), room_height - view_hview[0]);
            surface_resize(application_surface, view_wview[0], view_hview[0]);
        } else if(mouse_wheel_up()) {
            view_wview[0] /= 2;
            view_wview[0] = max(view_wport[0] / power(2, 5), view_wview[0]);
            view_hview[0] /= 2;
            view_hview[0] = max(view_hport[0] / power(2, 5), view_hview[0]);
            view_xview[0] = median(0, mouse_x - (view_wview[0] * xx), room_width - view_wview[0]);
            view_yview[0] = median(0, mouse_y - (view_hview[0] * yy), room_height - view_hview[0]);
            surface_resize(application_surface, view_wview[0], view_hview[0]);
        }
        if(input_check(LEFT)) {
            view_xview[0] = max(view_xview[0] - viewSpeed, 0);
        }
        if(input_check(RIGHT)) {
            view_xview[0] = min(view_xview[0] + viewSpeed, room_width - view_wview[0]);
        }
        if(input_check(UP)) {
            view_yview[0] = max(view_yview[0] - viewSpeed, 0);
        }
        if(input_check(DOWN)) {
            view_yview[0] = min(view_yview[0] + viewSpeed, room_height - view_hview[0]);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Eat
if(state &gt;= S_NAPOLEON) {
    if(foodTimer % 90 == 0) {
        apples -= min(1, apples);
    }
    if(foodTimer % 360 == 0) {
        milk -= min(1, milk);
    }
    if(foodTimer % 30 == 0) {
        hay -= min(1, hay);
    }
    if(foodTimer == 0) {
        eggs -= min(eggs, 200);
        foodTimer = 3000;
    }
    foodTimer--;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Music
if(room == rFarm &amp;&amp; !fadeOut) {
    if(state &lt; S_NAPOLEON) {
        if(!audio_is_playing(aHappy)) {
            audio_stop_all();
            audio_play_sound(aHappy, 0, true);
        }
    } else {
        if(!audio_is_playing(aDark)) {
            audio_stop_all();
            audio_play_sound(aDark, 0, true);
        }
    }
} else if(room == rMenu) {
    if(!audio_is_playing(aMenu)) {
        audio_stop_all();
        audio_play_sound(aMenu, 0, true);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State stuff
if(!dialog_count() &amp;&amp; instance_exists(_unit)) {
    switch(state) {
        case S_TUTORIAL:
            dialog_import("Tutorial");
            switch(progress) {
                case 0:
                    var i = 0;
                    with(_unit) {
                        if(x != destX || y != destY) {
                            i++;
                        }
                    }
                    if(i == 0) {
                        dialog_from_array(0);
                        cutscene = false;
                        progress = 1;
                    }
                    break;
                case 1:
                    task = "Use the left mouse button to select some animals.";
                    var is = false;
                    with(_unit) {
                        if(selected) {
                            is = true;
                        }
                    }
                    if(is) {
                        dialog_from_array(1);
                        progress = 2;
                    }
                    break;
                case 2:
                    task = "Select all the Cows and Horses using CTRL to add and ALT to deselect animals.";
                    var i = 0, j = 0;
                    with(_unit) {
                        if(selected) {
                            i++;
                        }
                    }
                    with(Horse) {
                        if(selected) {
                            j++;
                        }
                    }
                    with(Cow) {
                        if(selected) {
                            j++;
                        }
                    }
                    if(i == j &amp;&amp; j == instance_number(Horse) + instance_number(Cow)) {
                        dialog_from_array(2);
                        progress = 3;
                    }
                    break;
                case 3:
                    task = "Move the Cows and Horses to the Stable with the right mouse button.";
                    var i = 0;
                    with(Cow) {
                        if(x == Stable.x &amp;&amp; y == Stable.y) {
                            i++;
                        }
                    }
                    with(Horse) {
                        if(x == Stable.x &amp;&amp; y == Stable.y) {
                            i++;
                        }
                    }
                    if(i == instance_number(Horse) + instance_number(Cow)) {
                        dialog_from_array(3, 4);
                        progress = 4;
                    }
                    break;
                case 4:
                    task = "Move the Chickens to the Coop.";
                    var i = 0;
                    with(Chicken) {
                        if(x == Coop.x &amp;&amp; y == Coop.y) {
                            i++;
                        }
                    }
                    if(i == instance_number(Chicken)) {
                        dialog_from_array(5, 6);
                        state = S_BEGIN;
                        progress = 0;
                    }
                    break;
            }
            break;
        case S_BEGIN:
            dialog_import("Beginning");
            switch(progress) {
                case 0:
                    task = "Move the screen to the bottom left with the arrow keys.";
                    if(view_xview[0] &lt;= 16 &amp;&amp; view_yview[0] &gt;= room_height - view_hview[0] - 16) {
                        cutscene = true;
                        with(Jones) {
                            destX = House.x;
                            destY = House.y;
                        }
                        progress = 1;
                        task = "";
                    }
                    break;
                case 1:
                    with(Jones) {
                        if(place_meeting(x, y, Gate)) {
                            with(other) {
                                dialog_from_array(0, 1);
                                progress = 2;
                            }
                        }
                    }
                    break;
                case 2:
                    if(Jones.x == House.x &amp;&amp; Jones.y == House.y) {
                        dialog_from_array(2, 5);
                        cutscene = false;
                        progress = 3;
                    }
                    break;
                case 3:
                    task = "Charge down Mr. Jones' door!";
                    var i = 0;
                    with(_unit) {
                        if(object_index != Jones) {
                            if(x == House.x &amp;&amp; y == House.y) {
                                i++;
                            }
                        }
                    }
                    if(i &gt;= 8) {
                        dialog_from_array(6);
                        cutscene = true;
                        progress = 4;
                        task = "";
                    }
                    break;
                case 4:
                    with(House) {
                        var inst = instance_furthest(x, y, Farmer);
                        if(other.timer-- &lt;= 0) {
                            if(instance_number(Farmer) &lt;= 5) {
                                with(instance_create(x, y, Farmer)) {
                                    destX = Gate.x;
                                    destY = room_height + 16;
                                }
                                other.timer = 8;
                            } else {
                                Jones.destX = Gate.x;
                                Jones.destY = room_height + 16;
                                other.progress = 5;
                                other.timer = 0;
                            }
                        }
                    }
                    break;
                case 5:
                    if(point_distance(House.x, House.y, Jones.x, Jones.y) &gt; 128) {
                        with(_unit) {
                            if(x == House.x &amp;&amp; y == House.y) {
                                destX = Gate.x;
                                destY = Gate.y - 128;
                            }
                        }
                        progress = 6;
                    }
                    break;
                case 6:
                    if(!instance_exists(Farmer)) {
                        dialog_from_array(7, 9);
                        progress = 7;
                    }
                    break;
                case 7:
                    if(Snowball.x == Gate.x &amp;&amp; Snowball.y == Gate.y) {
                        dialog_from_array(10);
                        state = S_COMMANDMENTS;
                        progress = 0;
                    }
                    break;
            }
            break;
        case S_COMMANDMENTS:
            dialog_import("Commandments");
            switch(progress) {
                case 0:
                    if(Snowball.x == Barn.x + 32 &amp;&amp; Snowball.y == Barn.y + 32 &amp;&amp; Napoleon.x == Barn.x &amp;&amp; Napoleon.y == Barn.y + 32) {
                        var i = 0;
                        with(_unit) {
                            if(x == destX &amp;&amp; y == destY) {
                                i++;
                            }
                        }
                        if(i == instance_number(_unit)) {
                            Snowball.image_index = 1;
                            Napoleon.image_index = 1;
                            dialog_from_array(0, 12);
                            progress = 1;
                            cutscene = false;
                            with(Cow) {
                                milk = 60 * room_speed * 2;
                            }
                        }
                    }
                    break;
                case 1:
                    task = "Milk the Cows by sending them to the Stable";
                    var i = 0;
                    with(Cow) {
                        if(x == Stable.x &amp;&amp; y == Stable.y) {
                            i++;
                        }
                    }
                    if(i == instance_number(Cow)) {
                        dialog_from_array(13, 15);
                        progress = 2;
                        Napoleon.controllable = false;
                    }
                    break;
                case 2:
                    task = "Harvest the hay by moving animals to the Fields.";
                    var e = 0;
                    with(_unit) {
                        if(work != noone) {
                            e++;
                        }
                    }
                    if(e &gt;= 10) {
                        with(Napoleon) {
                            if(x == House.x &amp;&amp; y == House.y) {
                                carrying = noone;
                                Controller.milk = 0;
                                destX = Barn.x;
                                destY = Barn.y + 32;
                                controllable = true;
                            } else if(Controller.milk &gt; 0 &amp;&amp; carrying != sMilk) {
                                destX = Stable.x;
                                destY = Stable.y;
                            }
                            if(x == Stable.x &amp;&amp; y == Stable.y) {
                                carrying = sMilk;
                                amount = Controller.milk;
                                destX = House.x;
                                destY = House.y;
                            }
                        }
                    }
                    e = 0;
                    with(Field) {
                        if(targetHeight != 1) {
                            e++;
                        }
                    }
                    with(_unit) {
                        if(work != noone) {
                            if(work.object_index == Field) {
                                if(work.targetHeight == 0) {
                                    work = noone;
                                    destX = Barn.x;
                                    destY = Barn.y;
                                }
                            }
                        }
                    }
                    if(e == instance_number(Field)) {
                        e = 0;
                        with(_unit) {
                            if(x == destX &amp;&amp; y == destY) {
                                e++;
                            }
                        }
                        if(e == instance_number(_unit)) {
                            progress = 0;
                            state = S_FARMING;
                            task = "";
                        }
                    }
                    break;
            }
            break;
        case S_FARMING:
            dialog_import("Farming");
            switch(progress) {
                case 0:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(0, 3);
                        progress = 1;
                    }
                    break;
                case 1:
                    task = "Collect milk, eggs, and apples.";
                    if(Controller.eggs != 0 &amp;&amp; Controller.milk != 0) {
                        if(Orchard.apples &lt;= 0) {
                            var i = 0;
                            with(_unit) {
                                if(x == destX &amp;&amp; y == destY) {
                                    i++;
                                }
                            }
                            if(i == instance_number(_unit)) {
                                dialog_from_array(4, 16);
                                progress = 2;
                            }
                        }
                    }
                    break;
                case 2:
                    task = "Reseed the fields.";
                    var e = 0;
                    with(Field) {
                        if(targetHeight == 1/4) {
                            e++;
                        }
                    }
                    with(_unit) {
                        if(work != noone) {
                            if(work.object_index == Field) {
                                if(work.targetHeight != 0) {
                                    work = noone;
                                    destX = Barn.x;
                                    destY = Barn.y;
                                }
                            }
                        }
                    }
                    if(e &gt; 0) {
                        with(Dog) {
                            destX = Barn.x;
                            destY = Barn.y + 96;
                            controllable = false;
                            work = noone;
                        }
                        Napoleon.destX = Barn.x;
                        Napoleon.destY = Barn.y + 32;
                        Napoleon.controllable = false;
                        progress = 3;
                    }
                    break;
                case 3:
                    task = "Reseed the fields.";
                    var i = 0;
                    with(Dog) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    with(_unit) {
                        if(work != noone) {
                            if(work.object_index == Field) {
                                if(work.targetHeight != 0) {
                                    work = noone;
                                    destX = Barn.x;
                                    destY = Barn.y;
                                }
                            }
                        }
                    }
                    if(i == instance_number(Dog) &amp;&amp; Napoleon.x == Napoleon.destX &amp;&amp; Napoleon.y == Napoleon.destY) {
                        if(instance_number(Dog) == 2) {
                            with(instance_find(Dog, 1)) {
                                repeat(9) {
                                    with(instance_create(x, y, Dog)) {
                                        controllable = false;
                                    }
                                }
                            }
                        } else {
                            dialog_from_array(17, 18);
                            for(i = 2; i &lt; instance_number(Dog); i++) {
                                with(instance_find(Dog, i)) {
                                    destX = House.x;
                                    destY = House.y;
                                }
                                Napoleon.destX = House.x;
                                Napoleon.destY = House.y;
                                progress = 4;
                            }
                        }
                    }
                    break;
                case 4:
                    task = "Reseed the fields.";
                    with(_unit) {
                        if(work != noone) {
                            if(work.object_index == Field) {
                                if(work.targetHeight != 0) {
                                    work = noone;
                                    destX = Barn.x;
                                    destY = Barn.y;
                                }
                            }
                        }
                    }
                    if(instance_number(Dog) == 2) {
                        Napoleon.destX = Barn.x;
                        Napoleon.destY = Barn.y + 32;
                        progress = 5;
                    }
                    break;
                case 5:
                    task = "Reseed the fields.";
                    if(Napoleon.x == Napoleon.destX &amp;&amp; Napoleon.y == Napoleon.destY) {
                        Napoleon.controllable = true;
                        Dog.controllable = true;
                    }
                    with(_unit) {
                        if(work != noone) {
                            if(work.object_index == Field) {
                                if(work.targetHeight != 0) {
                                    work = noone;
                                    destX = Barn.x;
                                    destY = Barn.y;
                                }
                            }
                        }
                    }
                    var i = 0;
                    with(Field) {
                        if(targetHeight &gt; 0) {
                            i++;
                        }
                    }
                    if(i == instance_number(Field)) {
                        if(timer-- &lt;= 0) {
                            if(instance_number(Farmer) &lt; 6) {
                                var inst;
                                if(instance_number(Farmer) == 0) {
                                    inst = instance_create(Gate.x, room_height - 16, Jones);
                                } else {
                                    inst = instance_create(Gate.x, room_height - 16, Farmer);
                                }
                                with(inst) {
                                    destX = Gate.x;
                                    destY = Gate.y - 64;
                                }
                                timer = 8;
                            } else {
                                with(Jones) {
                                    if(place_meeting(x, y, Gate)) {
                                        with(other) {
                                            state = S_ATTACK;
                                            progress = 0;
                                            cutscene = true;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
            break;
        case S_ATTACK:
            dialog_import("Attack");
            switch(progress) {
                case 0:
                    task = "";
                    dialog_from_array(0);
                    progress = 1;
                    break;
                case 1:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        with(Farmer) {
                            destX = Barn.x + 96;
                            destY = Barn.y + 128;
                        }
                        progress = 2;
                    }
                    break;
                case 2: 
                    var i = 0;
                    with(Farmer) {
                        if(distance_to_object(Barn) &lt; 320) {
                            i++;
                        }
                    }
                    if(i == instance_number(Farmer)) {
                        dialog_from_array(1);
                        with(Pig) {
                            destX = Barn.x + 96;
                            destY = Barn.y + 96;
                        }
                        progress = 2.5;
                    }
                    break;
                case 2.5:
                    with(Pig) {
                        if(destX == x &amp;&amp; destY == y) {
                            other.timer = 24;
                            other.progress = 3;
                        }
                    }
                    break;
                case 3:
                    if(timer == 24) {
                        with(_unit) {
                            destX = Barn.x + 96;
                            destY = Barn.y;
                        }
                        with(Pig) {
                            if(x == destX &amp;&amp; y == destY) {
                                destX = Barn.x + 96;
                                destY = Barn.y - 64;
                            }
                        }
                        with(Farmer) {
                            destX = Barn.x + 96
                            destY = Barn.y - 64;
                        }
                        dialog_from_array(2);
                    }
                    if(timer-- &lt;= 0) {
                        dialog_from_array(3);
                        with(_unit) {
                            destX = Gate.x;
                            destY = Gate.y + 64;
                        }
                        with(Farmer) {
                            destX = Gate.x;
                            destY = room_height + 16;
                        }
                        progress = 4;
                    }
                    break;
                case 4:
                    if(instance_number(Farmer) == 0) {
                        dialog_from_array(4, 7);
                        with(_unit) {
                            if(home != noone) {
                                destX = home.x;
                                destY = home.y;
                            } else {
                                destX = Barn.x;
                                destY = Barn.y + 96;
                            }
                        }
                        state = S_WINDMILL;
                        progress = 0;
                    }
                    break;
            }
            break;
        case S_WINDMILL:
            dialog_import("Windmill");
            switch(progress) {
                case 0:
                    task = "Work on the fields.";
                    cutscene = false;
                    var i = 0;
                    with(Field) {
                        if(targetHeight &gt; 1/4) {
                            i++;
                        }
                    }
                    if(i == instance_number(Field)) {
                        cutscene = true;
                        with(_unit) {
                            destX = Barn.x;
                            destY = Barn.y + 96;
                            work = false;
                        }
                        Snowball.destY = Barn.y + 32;
                        Napoleon.destX = Barn.x + 32;
                        Napoleon.destY = Barn.y + 32;
                        progress = 1;
                    }
                    break;
                case 1:
                    if(cutscene) {
                        var i = 0;
                        with(_unit) {
                            if(x == destX &amp;&amp; y == destY) {
                                i++;
                            }
                        }
                        if(i == instance_number(_unit)) {
                            dialog_from_array(0, 12);
                            cutscene = false;
                        }
                    } else {
                        task = "Harvest the hay from the Fields.";
                        with(_unit) {
                            if(work != noone) {
                                if(work.object_index == Field) {
                                    if(work.targetHeight == 0) {
                                        work = noone;
                                        destX = Barn.x;
                                        destY = Barn.y;
                                    }
                                }
                            }
                        }
                        var i = 0;
                        with(Field) {
                            if(targetHeight == 0) {
                                i++;
                            }
                        }
                        if(i == instance_number(Field)) {
                            cutscene = true;
                            with(_unit) {
                                destX = Barn.x;
                                destY = Barn.y + 96;
                            }
                            Snowball.destY = Barn.y + 32;
                            Napoleon.destX = Barn.x + 32;
                            Napoleon.destY = Barn.y + 32;
                            progress = 2;
                        }
                    }
                    break;
                case 2:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(13, 19);
                        progress = 3;
                    }
                    break;
                case 3:
                    if(instance_number(Dog) &gt; 2) {
                        for(var i = 2; i &lt; instance_number(Dog); i++) {
                            with(instance_find(Dog, i)) {
                                if(destX == x &amp;&amp; destY == y) {
                                    destX = Snowball.x;
                                    destY = min(Snowball.y, Gate.y);
                                    if(distance_to_object(Snowball) &lt; 64) {
                                        with(Snowball) {
                                            destX = Gate.x;
                                            destY = room_height + 16;
                                            with(Controller) {
                                                progress = 4;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 4:
                    if(!instance_exists(Snowball)) {
                        for(var i = 2; i &lt; instance_number(Dog); i++) {
                            with(instance_find(Dog, i)) {
                                destX = Napoleon.x;
                                destY = Napoleon.y;
                            }
                        }
                        progress = 5;
                    } else {
                        if(Snowball.x == Gate.x &amp;&amp; Snowball.y == room_height + 16) {
                            with(Snowball) {
                                instance_destroy();
                            }
                        } else {
                            for(var i = 2; i &lt; instance_number(Dog); i++) {
                                with(instance_find(Dog, i)) {
                                    destX = Snowball.x;
                                    destY = min(Snowball.y, Gate.y);
                                }
                            }
                        }
                    }
                    break;
                case 5: 
                    var i = 0;
                    with(Dog) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(Dog)) {
                        dialog_from_array(20, 29);
                        state = S_NAPOLEON;
                        progress = 0;
                    }
                    break;
            }
            break;
        case S_NAPOLEON:
            dialog_import("Napoleon");
            switch(progress) {
                case 0:
                    task = "Gather hay, apples, milk, and eggs.";
                    if(cutscene) {
                        cutscene = false;
                        timer = 30 * 60 * 2; //1 minute
                    }
                    if(!timer--) {
                        dialog_from_array(0, 10);
                        progress = 1;
                    }
                    break;
                case 1:
                    task = "Gather hay, apples, milk, eggs, and stone.";
                    with(Hill) {
                        if(stones == 2) {
                            with(_unit) {
                                destX = Barn.x;
                                destY = Barn.y + 96;
                                work = noone;
                            }
                            with(other) {
                                cutscene = true;
                                progress = 2;
                            }
                        }
                    }
                    break;
                case 2:
                    task = "";
                    if(cutscene) {
                        var i = 0;
                        with(_unit) {
                            if(x == destX &amp;&amp; y == destY) {
                                i++;
                            }
                        }
                        if(i == instance_number(_unit)) {
                            dialog_from_array(11, 12);
                            cutscene = false;
                        }
                    } else {
                        var i = 0;
                        with(Pig) {
                            if(x == House.x &amp;&amp; y == House.y) {
                                home = House;
                                i++;
                            }
                        }
                        if(i == instance_number(Pig)) {
                            dialog_from_array(13, 18);
                            progress = 3;
                        }
                    }
                    break;
                case 3:
                    task = "Finish the Windmill.";
                    if(Hill.stones == 5) {
                        with(_unit) {
                            if(home != noone) {
                                destX = home.x;
                                destY = home.y;
                            } else {
                                destX = Barn.x;
                                destY = Barn.y + 96;
                            }
                            work = noone;
                        }
                        cutscene = true;
                        progress = 4;
                        timer = 30 * 3;
                    }
                    break;
                case 4:
                    task = "";
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        if(!timer--) {
                            Hill.stones = 0;
                            audio_play_sound(aCrash, 0, false);
                            with(_unit) {
                                destX = Hill.x;
                                destY = Hill.y + 128;
                            }
                            Napoleon.destY = Hill.y + 32;
                            progress = 5;
                        }
                    }
                    break;
                case 5:
                    task = "";
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(19, 24);
                        state = S_REBUILD;
                        progress = 0;
                        cutscene = false;
                    }
                    break;
            }
            break;
        case S_REBUILD:
            dialog_import("Rebuild");
            switch(progress) {
                case 0:
                    task = "Build the Windmill again, and keep farming.";
                    with(Pig) {
                        destX = home.x;
                        destY = home.y;
                    }
                    with(Dog) {
                        destX = home.x;
                        destY = home.y;
                    }
                    if(Hill.stones == 5) {
                        cutscene = true;
                        with(_unit) {
                            work = noone;
                            destX = Barn.x;
                            destY = Barn.y + 96;
                        }
                        Napoleon.y = Barn.y + 32;
                        progress = 1;
                    }
                    break;
                case 1:
                    task = "";
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(0, 3);
                        progress = 2;
                    }
                    break;
                case 2:
                    with(Dog) {
                        if(x == destX &amp;&amp; y == destY) {
                            with(instance_place(x, y, _unit)) {
                                instance_destroy();
                            }
                        }
                    }
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        progress = 3;
                        dialog_from_array(4, 5);
                    }
                    break;
                case 3:
                    task = "Work on the Windmill and Fields.";
                    if(cutscene) {
                        with(Dog) {
                            destX = House.x;
                            destY = House.y;
                        }
                        with(Pig) {
                            destX = House.x;
                            destY = House.y;
                        }
                        cutscene = false;
                    } else {
                        if(Hill.stones == 8) {
                            with(_unit) {
                                if(home != noone) {
                                    destX = home.x;
                                    destY = home.y;
                                } else {
                                    destX = Barn.x;
                                    destY = Barn.y + 96;
                                }
                                work = false;
                            }
                            cutscene = true;
                            progress = 4;
                        }
                    }
                    break;
                case 4:
                    task = "";
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i &gt;= instance_number(_unit) - instance_number(Farmer)) {
                        if(!timer--) {
                            with(instance_create(Gate.x, room_height - 16, Farmer)) {
                                destX = Hill.x;
                                destY = Hill.y;
                            }
                            if(instance_number(Farmer) == 10) {
                                progress = 5;
                            } else {
                                timer = 8;
                            }
                        }
                    }
                    break;
                case 5:
                    with(Farmer) {
                        if(x == destX &amp;&amp; y == destY &amp;&amp; other.progress &lt; 6) {
                            Hill.stones = 0;
                            if(!audio_is_playing(aCrash)) {
                                audio_play_sound(aCrash, 0, false);
                            }
                            with(_unit) {
                                if(object_index != Farmer) {
                                    destX = Hill.x;
                                    destY = Hill.y;
                                }
                            }
                            with(other) {
                                progress = 6;
                                dialog_from_array(6);
                            }
                        }
                    }
                    break;
                case 6:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        with(instance_find(Farmer, 0)) {
                            killer = true;
                            destX = instance_find(Chicken, 0).destX;
                            destY = instance_find(Chicken, 0).destY;
                        }
                        with(instance_find(Farmer, 1)) {
                            killer = true;
                            destX = instance_find(Cow, 0).destX;
                            destY = instance_find(Cow, 0).destY;
                        }
                        with(instance_find(Farmer, 2)) {
                            killer = true;
                            destX = instance_find(Sheep, 0).destX;
                            destY = instance_find(Sheep, 0).destY;
                        }
                        with(instance_find(Horse, 0)) {
                            killer = true;
                            destX = instance_find(Farmer, 3).destX;
                            destY = instance_find(Farmer, 3).destY;
                        }
                        with(instance_find(Horse, 1)) {
                            killer = true;
                            destX = instance_find(Farmer, 4).destX;
                            destY = instance_find(Farmer, 4).destY;
                        }
                        with(instance_find(Horse, 2)) {
                            killer = true;
                            destX = instance_find(Farmer, 5).destX;
                            destY = instance_find(Farmer, 5).destY;
                        }
                        progress = 7;
                    }
                    break;
                case 7:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        with(_unit) {
                            destX = Gate.x;
                            destY = Gate.y - 32;
                        }
                        Napoleon.destX = House.x;
                        Napoleon.destY = House.y + 32;
                        with(Farmer) {
                            destY = room_height + 16;
                        }
                        progress = 8;
                    }
                    break;
                case 8:
                    if(instance_number(Farmer) == 0) {
                        dialog_from_array(7, 15);
                        state = S_DEATH;
                        progress = 0;
                        cutscene = false;
                    }
                    break;
            }
            break;
        case S_DEATH:
            dialog_import("Death");
            switch(progress) {
                case 0:
                    task = "Work on the Windmill!";
                    if(Hill.stones == 1) {
                        dialog_from_array(0, 1);
                        progress = 1;
                    }
                    with(Pig) {
                        destX = House.x;
                        destY = House.y;
                    }
                    with(Dog) {
                        destX = House.x;
                        destY = House.y;
                    }
                    break;
                case 1:
                    task = "Work on the Windmill!";
                    if(Hill.stones == 7) {
                        with(Boxer) {
                            if(destX == Hill.x &amp;&amp; destY == Hill.y) {
                                if(!place_meeting(x, y, Quarry)) {
                                    controllable = false;
                                    destX = round(x / 32) * 32 + 16;
                                    destY = round(y / 32) * 32 + 16;
                                    with(_unit) {
                                        if(home == noone || home.object_index != House) {
                                            destX = Boxer.destX;
                                            destY = Boxer.destY + 128;
                                            work = noone;
                                        }
                                    }
                                    with(other) {
                                        progress = 2;
                                    }
                                }
                            }
                        }
                    }
                    break;
                case 2:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(2, 5);
                        cutscene = true;
                        progress = 3;
                    }
                    break;
                case 3:
                    var i = noone;
                    with(_unit) {
                        if(x == House.x &amp;&amp; y == House.y + 32) {
                            i = id;
                        }
                    }
                    if(i != noone) {
                        Squealer.destX = Boxer.x;
                        Squealer.destY = Boxer.y + 32;
                        i.destX = Boxer.x;
                        i.destY = Boxer.y + 64;
                        progress = 4;
                    }
                    break;
                case 4:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(6, 7);
                        cutscene = false;
                        progress = 5;
                    }
                    break;
                case 5:
                    task = "Finish the Windmill without Boxer.";
                    if(Hill.stones == 8) {
                        cutscene = true;
                        with(_unit) {
                            destX = Gate.x;
                            destY = Gate.y - 160;
                            work = noone;
                        }
                        Boxer.destY = Gate.y - 64;
                        instance_create(-16, Gate.y + 32, Car);
                        progress = 6;
                    }
                    break;
                case 6:
                    var i = 0;
                    with(_unit) {
                        if(x == destX &amp;&amp; y == destY) {
                            i++;
                        }
                    }
                    if(i == instance_number(_unit)) {
                        dialog_from_array(8);
                        Boxer.destX = Car.x;
                        Boxer.destY = Car.y;
                        progress = 7;
                    }
                    break;
                case 7: 
                    if(Boxer.x == Car.x &amp;&amp; Boxer.y == Car.y) {
                        with(Boxer) {
                            instance_destroy();
                        }
                        dialog_from_array(9, 12);
                        with(Car) {
                            destX = room_width + 16;
                        }
                        progress = 8;
                    }
                    break;
            }
            break;
    }
}
if(room == rEnding &amp;&amp; state == S_ENDING) {
    if(!timer--) {
        progress++;
        timer = 30 * 3;
        if(progress == 12) {
            game_end();
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Views
if(room == rFarm) {
    view_enabled = true;
    view_visible[0] = true;
    view_wview[0] = round(display_get_width());
    view_hview[0] = round(display_get_height());
    view_xview[0] = median(0, Barn.x - view_wview[0] / 2, room_width - view_wview[0]);
    view_yview[0] = median(0, Barn.y - view_hview[0] / 2, room_height - view_hview[0]);
    view_wport[0] = view_wview[0];
    view_hport[0] = view_hview[0];
    surface_resize(application_surface, view_wview[0], view_hview[0]);
    display_set_gui_size(-1, -1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load if should
if(doLoad) {
    load();
    cutscene = false;
    doLoad = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
//Variables
controls = "^&lt;v&gt;ZXC"; //Not like this game uses keyboard controls
sPause = noone;
doLoad = false;

alertText = "";
alertTimer = 0;

viewSpeed = 0;
viewClickX = noone;
viewClickY = noone;
viewScale = 20;

state = 0;
progress = 0;
cutscene = true;
task = "";

hay = 0;
apples = 0;
milk = 0;
eggs = 0;

timer = 0;
foodTimer = 0;
fadeOut = 0;

endText[0] = "From that point on, Animal Farm became worse and worse.";
endText[1] = "The windmill was eventually completed, but not used for its intended purpose.";
endText[2] = "The original farm animals had all died, Boxer long forgotten.";
endText[3] = "The pigs still had control over everything, ruling with their tyranny.";
endText[4] = "The principals of Animalism were further refined into just one Commandment:";
endText[5] = "ALL ANIMALS ARE EQUAL BUT SOME ANIMALS ARE MORE EQUAL THAN OTHERS.";
endText[6] = "The pigs learned to walk on two legs, wore clothes, drank alcohol.";
endText[7] = "And before long, they were indistinguishable from the evil humans.";
endText[8] = "";
endText[9] = "Animal Farm - Game by Cameron Eldridge - Based on the novel by George Orwell";

//Screen size
window_set_size(display_get_width(), display_get_height());
window_set_fullscreen(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Alerts
if(alertText != "") {
    draw_set_color(make_color_rgb(147, 67, 54));
    var xx = 0;
    if(alertTimer &gt; 2.5 * room_speed) {
        xx = (alertTimer - (2.5 * room_speed)) / 5;
        if(alertTimer % 2) {
            xx = -xx;
        }
    } else if(alertTimer &lt; room_speed) {
        draw_set_alpha(alertTimer / room_speed);
    }
    draw_text(alertX + xx, alertY, alertText);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fade out to end
if(fadeOut) {
    if(room == rFarm) {
        fadeOut++;
        if(fadeOut == 100) {
            progress = 0;
            room_goto(rEnding);
        }
    } else {
        fadeOut--;
        if(fadeOut == 0) {
            state = S_ENDING;
        }
    }
    draw_set_alpha(fadeOut / 100);
    draw_set_color(c_black);
    draw_rectangle(0, 0, window_get_width(), window_get_height(), false);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the background and ending text
if(room == rEnding) {
    draw_set_alpha(1);
    draw_background(bgEnd, (window_get_width() - background_get_width(bgEnd)) / 2, 0);
    draw_set_font(fMenu);
    draw_set_color(make_color_rgb(51, 51, 51));
    draw_set_halign(fa_center);
    if(progress) {
        for(var i = 0; i &lt; min(progress, 10); i++) {
            if(i == progress - 1) {
                draw_set_alpha((90 - timer) / 90);
            }
            draw_text(window_get_width() / 2, window_get_height() / 2 - 160 + (string_height("A") * i), endText[i]);
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw sPause
if(sprite_exists(sPause)) {
    draw_sprite(sPause, 0, view_xview[0], view_yview[0]);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Darkened after Snowball is expelled
if(room == rFarm) {
    if(state &gt;= S_NAPOLEON) {
        if(!sprite_exists(sPause)) {
            draw_set_alpha(0.2);
            draw_background_stretched(bgFog, view_xview[0], view_yview[0], view_wview[0], view_hview[0]);
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///SAVE
if(room == rFarm &amp;&amp; !dialog_count() &amp;&amp; !sprite_exists(sPause) &amp;&amp; !cutscene) {
    save();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
