<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize
selected = false;

destX = x;
destY = y;
dest = path_add();
mp_grid_path(UnitController.grid, dest, x, y, x, y, false);
image_speed = 0;
animate = 0;

productivity = 1;
strength = 10;
controllable = true;
killer = false;

description = "";

home = noone;
work = noone;
carrying = noone;
amount = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
if((abs(x - path_get_x(dest, 1)) &gt; 2 || abs(y - path_get_y(dest, 1)) &gt; 2) &amp;&amp; animate) {
    direction = round(direction / 90) * 90;
    image_index = (image_index + 1) % 4;
    if(direction == 180) {
        image_index += 4;
    } else if(direction == 0) {
        image_index += 8;
    } else if(direction == 90) {
        image_index += 12;
    }
} else if(x == destX &amp;&amp; y == destY) {
    image_index -= (image_index % 4) - 1;
}
animate = !animate;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Depth
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill
if(killer == true) {
    if(x == destX &amp;&amp; y == destY) {
        with(instance_place(x, y, _unit)) {
            instance_destroy();
        }
        audio_play_sound(aDie, 0, false);
        killer = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Work
if(x == Barn.x &amp;&amp; y == Barn.y) {
    if(carrying == sBale) {
        Controller.hay += amount;
    } else if(carrying == sApple) {
        Controller.apples += amount;
    }
    carrying = noone;
    amount = 0;
    if(work == noone) {
        destX = Barn.x;
        destY = Barn.y + 96;
    }
}
if(work != noone) {
    if(Controller.state &gt;= S_COMMANDMENTS &amp;&amp; work.object_index == Field) {
        if(destX == x &amp;&amp; destY == y) {
            if(x == Barn.x &amp;&amp; y == Barn.y) {
                Controller.hay += amount;
                carrying = noone;
                amount = 0;
            }
            with(work) {
                var dx = 0, dy = 0;
                for(var i = 0; i &lt; array_height_2d(hayMap); i++) {
                    for(var j = 0; j &lt; array_length_2d(hayMap, i); j++) {
                        if(hayMap[i, j] == targetHeight) {
                            dx = x + 32 + 32 * j + 16;
                            dy = y + 32 + 32 * i + 16;
                            break;
                        }
                    }
                }
                if(place_meeting(x, y, other)) {
                    if(other.amount &lt; other.productivity) {
                        var xx, yy;
                        xx = (other.x - x - 32 - 16) / 32;
                        yy = (other.y - y - 32 - 16) / 32;
                        if(xx &gt;= 0 &amp;&amp; xx &lt; array_length_2d(hayMap, 0) &amp;&amp; yy &gt;= 0 &amp;&amp; yy &lt; array_height_2d(hayMap)) {
                            if(hayMap[yy, xx] == targetHeight) {
                                if(hayMap[yy, xx] == 1) {
                                    hayMap[yy, xx] = 0;
                                    other.amount++;
                                    other.carrying = sBale;
                                } else if(hayMap[yy, xx] &lt; 1) {
                                    hayMap[yy, xx] += 1/4;
                                }
                            }
                        }
                    }
                }
                if(other.amount &lt; other.productivity) {
                    for(var i = 0; i &lt; array_height_2d(hayMap); i++) {
                        for(var j = 0; j &lt; array_length_2d(hayMap, i); j++) {
                            if(hayMap[i, j] == targetHeight) {
                                other.destX = x + 32 + 32 * j + 16;
                                other.destY = y + 32 + 32 * i + 16;
                                break;
                            }
                        }
                    }
                    if(other.destX == other.x &amp;&amp; other.destY == other.y) {
                        other.destX = Barn.x;
                        other.destY = Barn.y;
                        work = noone;
                    }
                } else {
                    if(other.productivity &gt; 0) {
                        other.destX = Barn.x;
                        other.destY = Barn.y;
                    }
                }
            }
        }
    } else if(Controller.state &gt;= S_FARMING &amp;&amp; work.object_index == Orchard) {
        if(destX == x &amp;&amp; destY == y) {
            if(productivity &gt; 0) {
                if(work.apples &gt; 0 &amp;&amp; amount &lt; productivity) {
                    destX = work.x + irandom(work.sprite_width / 32) * 32 + 16;
                    destY = work.y + irandom(work.sprite_height / 32) * 32 + 16;
                    if(place_meeting(x, y, work)) {
                        carrying = sApple;
                        amount++;
                        work.apples--;
                    }
                } else {
                    destX = Barn.x;
                    destY = Barn.y;
                    if(work.apples &lt;= 0) {
                        work = noone;
                    }
                }
            }
        }
    } else if(Controller.state &gt;= S_NAPOLEON &amp;&amp; work.object_index == Quarry) {
        if(x == destX &amp;&amp; y == destY) {
            var str = 0;
            with(_unit) {
                if(work.object_index == Quarry &amp;&amp; x == Quarry.x &amp;&amp; y == Quarry.y) {
                    str += strength;
                }
            }
            if(str &gt;= 250) {
                destX = Hill.x;
                destY = Hill.y;
            } else {
                destX = Quarry.x;
                destY = Quarry.y;
            }
        }
    }
}
if(x == destX &amp;&amp; y == destY) {
    if(place_meeting(x, y, Field)) {
        work = instance_place(x, y, Field);
    } else if(place_meeting(x, y, Quarry)) {
        work = instance_place(x, y, Quarry);
    } else if(place_meeting(x, y, Orchard)) {
        work = instance_place(x, y, Orchard);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move towards point
if((destX != x || destY != y) &amp;&amp; (destX != path_get_x(dest, 1) || destY != path_get_y(dest, 1))) {
    if(mp_grid_path(UnitController.grid, dest, x, y, destX, destY, false)) {
        var spd = 4;
        if(Controller.state &gt;= S_DEATH) {
            spd = 3;
        }
        if(work != noone) {
            if(work.object_index == Quarry &amp;&amp; destX == Hill.x &amp;&amp; destY == Hill.y) {
                spd = 1;
            }
        }
        path_start(dest, spd, 0, false);
    } else {
        destX = round((x - 16) / 32) * 32 + 16;
        destY = round((y - 16) / 32) * 32 + 16;
    }
} 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Snap to 4x4 grid
move_snap(4, 4);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw dest
if(controllable) {
    if(selected) {
        if(x != path_get_x(dest, 1) || y != path_get_y(dest, 1)) {
            draw_set_alpha(0.5);
            draw_set_color(c_black);
            draw_path(dest, x, y, true);
            draw_circle(path_get_x(dest, 1), path_get_y(dest, 1), 3, true);
            draw_set_alpha(1);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw self
if((x != home.x || y != home.y) &amp;&amp; (x != House.x || y != House.y)) {
    draw_self();
    if(carrying != noone) {
        for(var i = amount; i &gt; 0; i--) {
            draw_sprite(carrying, 0, x, y - i * 8);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw selection square
if(selected) {
    draw_set_color(c_black);
    draw_set_alpha(0.3);
    draw_rectangle(x - sprite_xoffset, y - sprite_yoffset, x + sprite_width - sprite_xoffset, y + sprite_height - sprite_yoffset, true);
    draw_set_alpha(1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
